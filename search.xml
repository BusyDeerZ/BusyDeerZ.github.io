<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python学习之基础语法]]></title>
    <url>%2F2019%2F03%2F06%2Fp3%2F</url>
    <content type="text"><![CDATA[前言：距离上一次博客已经是电脑坏之前了，电脑修修，加上自己对于配置的蜜汁拖延以及配的时候总会有各种各样的问题【你确定不是你的问题？】 emmm ，反正不论如何，这次算是配好了！而且比上次配的更全面！【也算是进步吧！安慰一下自己….】 然后最近呢，除了效率低下以外就是还是在不断的探索如何更好地平衡学习与运动、朋友和男朋友，当然啦，这不是我不学习的理由。 英语呢，最近总是背的很慢【同学你背快过？】好吧，今天呢，回顾了一下UNIT ONE【回顾 or 从头学习？】，还有高数的1.3和1.4，emmm你没看错，10多天过去了，我还在高数才刚刚开始的阶段… 然后呢，学了Numpy还有就是终于配置好你了！闲话太多…我们来看我最近学习的Python吧…！ —————-分界线—————- 1. Python 小介绍Python 是面向对象的、解释型计算机程序设计语言。 目前用Python实现的网站有：雅虎地图、谷歌、YouTube、豆瓣等。 变量命名规则： ​ 首字母：字母/下划线 ​ 字符：字母、下划线、数字 ​ 区分大小写 关于注释：多行注释需要在每一行增加‘#’（eclipse中快捷键为：ctrl+/） 关于编码：在代码中出现中文字符的需要在开头增加coding=gbk 2. Python 数据类型Python 的数据类型主要有：数字（Number）、字符串（String）、列表（List）、元组（Tuple）、字典（Dictionary）。 ①数字（Number）其中数字类型中，主要包含int、long、float、complex（复数）【形如：a+bj / complex(a,b)】 PS.在整型计算中，/ 表示一般除法，而// 表示整除。 ②字符串（String）1.单引号、双引号、三引号​ 单引号与双引号可以进行互换 ​ 三引号可以同时打印多行 PS.换行符为 \n 2.字符串不可变​ 一旦字符串进行创建就不可再变 3.Format操作字符串​ 123age = 3name = 'Tom'print ('&#123;0&#125; was &#123;1&#125; years old'.format(name,age)) 打印出Tom was 3 years old 4.联合字符串​ 1print (name+'was'+str(age)+'years old') 打印出Tom was 3 years old ③列表（List）1.列表内部元素列表内部的元素可以有多种数据类型 12list1 = [1,3,5,7]list2 = ['1',1] 2.列表下标 3.列表常用函数123456789101112131415list1 = [1,'a',2] print ('the list is '+str(list1)) #list1 中的元素格式不同，需要将其进行强制类型转换print (list1)print (list1[1]) #打印第二个元素print (list1[0:2]) #打印第一个、第二个元素，【左闭右开】list1[2] = 5 #将list1 进行更新print (list1)del list1[1] #删除list1 中的第二个元素print (list1)print (len(list1)) #得到list1 的长度print (list1 + [4,5]) #连接list1 与[4,5]print (['Hello']*4) #重复打印为['Hello','Hello','Hello','Hello']print (3 in [1,2,3]) #检验3 是否在列表中print (list1[-2]) #打印倒数第二个元素print (list1[1:]) #从第二个元素开始打印到最后一个元素 4.列表操作函数12345cmp (list1,list2) #比较列表中的元素len (list1)max (list1)min (list1)list (seq) #将元组转换成列表 5.列表操作方法123456789list.append(obj) #在列表末尾添加新的对象list.count(obj) #统计某个元素在列表中的出现次数list.extend(seq) #在列表末尾中一次追加另一个序列中的多个值（用新列表扩展成原来的列表）list.index(obj) #从列表中找出某个值第一次的索引位置list.insert(index,obj) #将对象插入列表list.pop(obj = list[-1]) #移除列表中的某一个元素（默认最后一个元素，并返回该元素的值）list.remove(obj) #移除列表中的某一个值的第一个匹配项list.reverse() #反向列表中的元素list.sort([func]) #对原列表进行排序 ④元组（Tuple）一旦创建就不可更改 12tuple1 = (1,3,5,7,9)print (tuple1[1]) 不可更新与局部删除元素，但是可整体删除 常用函数与列表常用函数相似 元组与列表的不同 1.元组修改123456tuple1 = (2,) #只有一个元素的元组表示方法mix_tuple = (1,2,['a','b']) print (str(mix_tuple)) #类型不同需要进行强制类型转换mix_tuple[2][0] ='c' #将元组中的第三个元素（列表）中的第一个值修改为‘c’mix_tuple[2][1] ='d'print (str(mix_tuple)) 2.元组更新、增加与删除Tuple 不能更新元素的增加、修改与删除 可删除整个 3.Tuple的好处-Tuple操作速度更快 Tuple 比 List 操作速度快，如一个常量集只需要不断遍历，用Tuple更佳 -写保护 Tuple 可以对不需要修改的数据进行写保护 必须要修改时，可以从元组转换成列表，再进行修改 ⑤字典（Dictionary） 键 键值 Key Value 12345678dic1 = &#123;'Tom':123,1:456,'B':789&#125; #Key和Value的值可以为任意格式mix_dic = &#123;'Tom':'boy',11:23:5&#125;print (str(dic(['Tom']))) #打印时需要进行强制类型转换dic1 ['Tom'] = 999 del dic1['Tom'] #删除对应值dic1.clear() #清空字典del dic1 #删除整个字典dic2 =&#123;'name' = 'A','age' = 5,'name' = 'B'&#125; #只有唯一的键 3. Python 函数① 定义def定义函数 ② 返回值返回值可以有，也可以没有 ③ 变量全局变量：位于函数外部或global x 局部变量：位于函数内部 ④ 函数参数 默认参数 一旦开始用默认参数，则后面都为默认参数，以便于一一对应 关键字参数 选择性对参数进行传值 VarArgs参数 不必指明传递的参数个数 1234567def func(a,b=4,c=8) print ('a is'a,'b is'b,'c is'c) func(13,17) #a=13,b=17,c=8func(123,c = 24) #a=123,b=4,c=24func(c = 48,a = 80) #a=80,b=4,c=48func(a,b=2) #在使用缺省参数后，对于函数的必填参数必须在前，默认参数在后func(a=2,b) 默认参数 12345def a(f,*nums,**words) #*nums 相当于一个元组且不指明长度，**words有关键字传入的参数进行对应 print ('f:'+str(f)) print ('nums:'+str(nums)) print ('words:'+str(words))print ('hello',1,2,3,4,word = 'python',another_word = 'java') 1234#打印结果f:hellonums:(1,2,3,4)words:&#123;'another_word':'java','word':'python'&#125; 4. Python控制流① 循环语句1.ifif…elif…else 2.for12345a = &#123;'Tom':111,'Jane'：222&#125;for i in a: print (i) #打印Key print (a[i]) #打印Value print (i,a[i]) for i in range(1,4) #i=1,2,3 3.while直到条件不符合直接跳出循环 ② break语句跳出整个循环 ③ continue语句跳出当前循环的剩余部分并重新进入新的循环 ④ pass语句直接忽略当前，继续执行之后的内容 123456789a = [0,1,2]for i in a: if not i: continue print (i) #打印出1、2for i in a: if not i: pass print (i) #打印出0、1、2 5. Python输入输出 输入 input() 输出 print() 6. Python读写文件(I/O)写文件 1234f = open('sen.txt','w') #创建文件打开并写入文件，文件默认存放当前工作目录【也可加绝对路径】，‘w’写模式a = 'nihao'f.write(a) #写入a的值f.close 读文件 1234567f = open('sen.txt')while True: line = f.readline() #每次读取一行的内容转换成string格式并且赋值给line if len(line) ==0: #当前行内容为空是，表示输出完成【可输出回车】 break print(line)f.close 7. Python错误与异常123456while True: try: x = int(input('Please enter a number')) break except ValueError: print ('Not valid input,try again') 执行说明 1.执行 try 语句下的代码 2.是否出现异常，无异常则except语句内容被忽略；有异常，则可以分为属于except定义的异常，try后的异常代码被忽略，直接跳至except语句执行；否则程序将执行外围一层的try语句，如果异常没有被处理，将产生unhandled exception的错误 8. Python面向对象编程类：现实世界中一些事物的封装（如：学生） ​ 类含有属性（如：名字、成绩） 引用：通过引用对类的属性和方法进行操作 实例化：创建一个类的具体实例对象（如：张三） 具体实例 Student类 123456789class Student: def __init__(self,name,grade): #构造函数，每次实例化类都会调用 self.name = name self.grade = grade def introduction(self)： print('My name is :'+self.name) print('My grade is :'+str(self.grade)) def improve(self,amount): self.grade+=amount 实例引用 1234jim = Student('jim',86)jim.introduction()jim.improve(10)jim.introduction() 9. Python装饰器​ 在原来函数的主体上加入一些小细节 12345678910111213141516def add_candles(cake_func): def insert_candles(): return cake_func()+'candles' return insert_candlesdef make_cake(): return "cake"①gift_func = add_candles(make_cake)print (make_cake())print (gift_func())②make_cake = add_candles(make_cake)③@add_candlesdef make_cake(): return cake_func()+'add candles']]></content>
      <categories>
        <category>Python学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[利用Github Pages搭建博客]]></title>
    <url>%2F2019%2F02%2F23%2Fp1%2F</url>
    <content type="text"><![CDATA[写在前面： ​ 拖拖拉拉的假程序员，终于要开始自主学习了，之前一年的时间，大部分用来划水和适应，但是终究还是要面临毕业，面对考研/工作的选择，我选择了前者，但是专业知识和技能的薄弱以及结合专业的特点让我有了开始写个人博客的念头，拖延症的自己，终于在返校的第二天开始摩拳擦掌的开了博客，希望此博客能够常常更新，不仅仅作为平时学习的记录，同时也是考研的记录，希望19年能够是有所成长的一年。 一、开始搭建Github Pages1.前言 博客那么多，为啥我要自己搭一个？ 哈哈哈，请先让我大笑一下，这个就好像是一个专栏采访，那么我现在认真回答一下（戏精…）。①其实本来是想和同学一起学做个人博客的，但是目前考虑到时间成本以及学习做记笔记的刚需，我想我还是先采用Github Pages这个成熟的项目；②而且每天都有颜色展示自己的工作进度，还是具有一定督促的（朋友，希望你经常来看看你的BusydeerZ；③之前同学有用同款，我也就心动想借鉴借鉴（抄袭！）。 总而言之，一句话，就是想学习一下怎么更好地记笔记然后好好的做一下记录，记录一下自己的成长。 2.起步1.注册Github 首先进入Github 官网进行注册，注册完成登陆。 2.创建仓库 登陆后，在个人首页找到 New repositor （新存储库）并按照如下图所示进行创建新仓库 3.开启Github Pages 进入设置 找到Github Pages 以 用户名+.github.io 默认开始GitHub Pages 选择主题 设置完毕后，可以通过 用户名.github.io访问自己的博客如（busydeerz.github.io） 二、Hexo安装 Hexo是一个快速、简洁且高效的博客框架。 官网：https://hexo.io/zh-cn/(视频教程+文档 还是非常靠谱的) 具有以下四个特点： 超快速度 支持Markdown 一键部署 丰富的插件 1.Node.js 和 Git 安装 在安装Hexo之前需要安装Node.js以及Git 可按照如下教程进行安装 Node.js 安装教程 Git 安装教程 2.Hexo安装在需要安装Hexo的目录下，新建文件夹并右键选择 Git Bash Here ，输入 1$ npm install hexo-cli -g 等待安装完毕，输入 hexo命令来查看是否安装成功，如下图所示即为安装成功。 初始化 Hexo 输入 1$ hexo init hexo 初始化成功后出现一个名为 hexo 的文件夹 然后进入 hexo 目录 cd hexo 安装依赖文件 npm install 部署形成文件 hexo generate可以缩写成hexo g 开启hexo服务 hexo server可以缩写成hexo s 成功开启服务，可以打开浏览器输入 http://localhost:4000/查看默认博客，如下图所示 三、配置GitHub Pages1.设置SSH Key可按照此教程进行设置Github 设置SSH Key 2.将本地 hexo 项目托管到Github打开先前hexo初始化的目录，找到根目录下的 _config.yml文件，打开并找到最后的deploy属性，加入代码： 123type: gitrepository: gitgit@github.com:用户名/用户名.github.io.gitbranch: master 3.安装 hexo-deployer-git 插件npm install hexo-deployer-git --save 每次修改本地主题，都需要执行以下代码，部署到github上 hexo clean hexo generator #简写成hexo g hexo deploy #简写成hexo d 完成以上步骤就可以将hexo初始的界面部署到Github Pages上 四、基础配置与主题安装1.基础配置 找到根目录的 _config.yml文件，修改里面的关键信息 1234567title: Dyroad的探索之旅subtitle:description: 本博客旨在在记录分享Dyroad学习的过程。keywords: hexoauthor: Dyroad Chenglanguage: zh-Hanstimezone: //默认按照电脑时区 2.主题安装安装主题 发现自己的博客太简单了，琢磨着换一个主题，选定的主题为NexT 1git clone https://github.com/iissnan/hexo-theme-next themes/next 启动NexT主题 打开根目录的_config.yml,找到theme字段，将其只修改为next 验证主题 注意：每次切换主题后、验证主题之前都需要清除Hexo的缓存 hexo clean //清除缓存 验证:启动Hexo本地服务器 hexo s 运行http://localhost:4000查看博客是否切换到指定主题。 3.主题设定可以按照如下教程进行NexT主题修改 NexT主题修改教程 五、写作新建一篇文章 hexo new 文章名 //新建文章 hexo new page 页面名 //新建页面 hexo g -d //部署 hexo s 最后 第一篇博客纰漏难免，忘见谅！（写不动了，草草结尾！见谅！） 全文参考： ​ 我是如何利用Github Pages搭建起我的博客，细数一路的坑 ​ Hexo免费搭建一个属于自己的博客 ​ Hexo的Next主题详细配置 ​ github-如何设置SSH Key 关于图片不能显示！ 很开心的放截图！ 结果不能显示？？？我？？？ 万能百度！ hexo生成博文插入图片【转】 hexo博客图片问题 hexo本地与github不同步的解决方案 ERROR Deployer not found: git ​]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
  </entry>
</search>
